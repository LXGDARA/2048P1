#include <iostream>
#include <time.h>
#include <stdlib.h>
#include <windows.h>
#include <math.h>


using namespace std;

    int board[4][4] = {};
    class game{
        public:
        // adds up
        void addUp(){
            int counter = 3;
            int row2 = 1;
            int row1 = 0;
            int row3 = 2;
            int row4 = 3;
            int val1 = 0;
            // increases position in table
            for(val1 = 0; val1<counter; val1++){
                // makes sure that values are equal so that it can add up
                if(board[row1][val1] == board[row2][val1] && board[row1][val1] > 0){
                    board[row1][val1] ++;
                    board[row2][val1] = 0;
                }
                // makes sure that value in colum is 0 so it can move everything up
                if(board[row1][val1] == 0){
                        board[row1][val1] = board[row2][val1];
                        board[row2][val1] = 0;
                }
                // makes sure that values are equal so that it can add up
                if(board[row2][val1] == board[row3][val1] && board[row2][val1] > 0){
                    board[row2][val1] ++;
                    board[row3][val1] = 0;
                }
                // makes sure that value in colum is 0 so it can move everything up
                if(board[row2][val1] == 0){
                    board[row2][val1] = board[row3][val1];
                    board[row3][val1] = 0;
                }
                // makes sure that values are equal so that it can add up
                if(board[row3][val1] == board[row4][val1] && board[row3][val1] > 0){
                    board[row3][val1] ++;
                    board[row4][val1] = 0;
                }
                // makes sure that value in colum is 0 so it can move everything up
                if(board[row3][val1] == 0){
                    board[row3][val1] = board[row4][val1];
                    board[row4][val1] = 0;
                }
           }
        }
        // adds right
        void addRowsRt(){
            int counter = 3;
            int row2 = 1;
            int row1 = 0;
            int row3 = 2;
            int row4 = 3;
            int val1 = 0;
            int val2 = 0;
            // increases position in colum
            for(val1 = 0; val1<counter; val1++){
                // increases second position in colum
                for(val2 = val1+1; val2<=3; val2++){
                    // makes sure that values are equal so that it can add right
                    if(board[row1][val2] == board[row1][val1] && board[row1][val2] > 0){
                        board[row1][val2] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row1][val2] == 0){
                        board[row1][val2] = board[row1][val1];
                        board[row1][val1] = 0;
                    }
                    // makes sure that values are equal so that it can add right
                    if(board[row2][val2] == board[row2][val1] && board[row2][val2] > 0){
                        board[row2][val2] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row2][val2] == 0){
                        board[row2][val2] = board[row2][val1];
                        board[row2][val1] = 0;
                    }
                    // makes sure that values are equal so that it can add right
                    if(board[row3][val2] == board[row3][val1] && board[row3][val2] > 0){
                        board[row3][val2] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row3][val2] == 0){
                        board[row3][val2] = board[row3][val1];
                        board[row3][val1] = 0;
                    }
                    // makes sure that values are equal so that it can add right
                    if(board[row4][val2] == board[row4][val1] && board[row4][val2] > 0){
                        board[row4][val2] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row4][val2] == 0){
                        board[row4][val2] = board[row4][val1];
                        board[row4][val1] = 0;
                    }
                }
            }
        }
        //adds left
        void addRowsLf(){
            int counter = 3;
            int row2 = 1;
            int row1 = 0;
            int row3 = 2;
            int row4 = 3;
            int val1 = 0;
            int val2 = 1;

            // increases position in colum
            for(val1 = 0; val1<counter; val1++){
                // increases second position in the colum
                for(val2 = val1+1; val2<=3; val2++){
                    if(board[row1][val1] == board[row1][val2] && board[row1][val1] > 0){
                        board[row1][val1] ++; // places values in one box one the table in row 1
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row1][val1] == 0){
                        board[row1][val1] = board[row1][val2];
                        board[row1][val2] = 0;
                    }
                    // makes sure that values are equal so that it can add down
                    if(board[row2][val1] == board[row2][val2] && board[row2][val1] > 0){
                        board[row2][val1] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row2][val1] == 0){
                        board[row2][val1] = board[row2][val2];
                        board[row2][val2] = 0;
                    }
                    // makes sure that values are equal so that it can add down
                    if(board[row3][val1] == board[row3][val2] && board[row3][val1] > 0){
                        board[row3][val1] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row3][val1] == 0){
                        board[row3][val1] = board[row3][val2];
                        board[row3][val2] = 0;
                    }
                    // makes sure that values are equal so that it can add left
                    if(board[row4][val1] == board[row4][val2] && board[row4][val1] > 0){
                        board[row4][val1] ++;
                    }
                    // makes sure that value in colum is 0 so it can move everything left
                    if(board[row4][val1] == 0){
                        board[row4][val1] = board[row3][val2];
                        board[row4][val2] = 0;
                    }
                }
            }
        }
        //add down
       void addRowsDn(){
           int counter = 3;
           int row2 = 1;
           int row1 = 0;
           int row3 = 2;
           int row4 = 3;
           int val1 = 0;
           // increases the position in the colums
           for(val1 = 0; val1<=counter; val1++){
                   // makes sure that values are equal so that it can add down
                   if(board[row4][val1] == board[row3][val1] && board[row4][val1] > 0){
                       board[row4][val1] ++;
                       board[row3][val1] = 0;
                   }
                   // makes sure that value in colum is 0 so it can move everything down
                   if(board[row4][val1] == 0){
                       board[row4][val1] = board[row3][val1];
                       board[row3][val1] = 0;
                   }
                   // makes sure that values are equal so that it can add down
                   if(board[row3][val1] == board[row2][val1] && board[row3][val1] > 0){
                       board[row3][val1] ++;
                       board[row2][val1] = 0;
                    }
                    // makes sure that value in colum is 0 so it can move everything down
                    if(board[row3][val1] == 0){
                        board[row3][val1] = board[row2][val1];
                        board[row2][val1] = 0;
                    }
                    // makes sure that values are equal so that it can add down
                    if(board[row2][val1] == board[row1][val1] && board[row2][val1] > 0){
                        board[row3][val1] ++;
                        board[row1][val1] = 0;
                    }
                    // makes sure that value in colum is 0 so it can move everything down
                    if(board[row2][val1] == 0){
                        board[row2][val1] = board[row1][val1];
                        board[row1][val1] = 0;
                    }
                    // makes sure that values are equal so that it can add down
                    if(board[row1][val1] == board[row2][val1] && board[row1][val1] > 0){
                        board[row2][val1] ++;
                        board[row2][val1] = 0;
                    }
            }
        }
        // shows current status of all blocks
        void showG(){
            for(int i = 0; i <4; i++){
                for(int j = 0; j < 4; j++){
                    cout << "\t\t" << board[i][j] << "   ";
                }
            cout << endl;
            }
        }
        // randomizes two positions to begin the game with
        void randpos(){
            int i;
            int y;
            int x;
            i = 0;
            for(i = 0; i<2; i++){
                x = rand() % 4;
                y = rand() % 4;
                board[x][y] = 1;
            }
        }
        // fills random spaces so the game can progress
        void spcfill(){
            int y;
            int x;
            x = rand() % 4;
            y = rand() % 4;
            if(board[x][y] == 0){
                board[x][y] = 1;
            }
        }
        // checks if we're at 2^36
        void gamechk(){
            int row1 = 0;
            for(int i = 0; i <=3; i++){
                    switch(board[row1][i]){
                        case 36 :
                             cout << "Game over you win!";
                    }
            }
        }
        // checks if all the spaces are filled and unequal to the ones below, above or beside them
        void gamovr(){
            for(int i = 0; i<=3; i++){
                for(int j = 0; j<=3; j++){
                    if(board[i][j] != board[i + 1][j]){
                    system("PAUSE");
                    cout << "game over!!";
                    }
                }
            }
        }
        // initializes board , so all values are equal to 0
        void boardinit(){
            int counter = 4;
            int row2 = 1;
            int row1 = 0;
            int row3 = 2;
            int row4 = 3;
            int val1 = 0;

            // counter is set to equal 3, and also serves as the number of times the position of the boxes will increase in a proxy place
            for(val1 = 0;val1<counter;val1++){
                board[row1][val1] = 0;
                board[row2][val1] = 0;
                board[row3][val1] = 0;
                board[row4][val1] = 0;
            }
        }
   };
   class chks{

    public:
        int countr = 4;
        int row2 = 1;
        int row1 = 0;
        int row3 = 2;
        int row4 = 3;
        int match;
        int upchk(){
        int val1 = 0;
        int val2 = 0;
        int countr = 4;
        int upbrd[4][4] = {};
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 0; val2<=countr; val2++){
                    upbrd[val1][val2] = board[val1][val2];
                }
            }
            val1 = 0;
            val2 = 0;
             for(val1 = 0; val1<=countr; val1++){
                for(val2 = 0; val2<=countr; val2++){
                    if(upbrd[row1][val1] == upbrd[row2][val1] && upbrd[row1][val1] > 0){
                        match++;
                    }
                    // makes sure that values are equal so that it can add up
                    if(upbrd[row2][val1] == upbrd[row3][val1] && upbrd[row2][val1] > 0){
                        match++;
                    }
                    // makes sure that values are equal so that it can add up
                    if(upbrd[row3][val1] == upbrd[row4][val1] && upbrd[row3][val1] > 0){
                        match++;
                    }
                }
            }
        }
        int match2;
        int rghtchk(){
            int val1 = 0;
            int val2 = 1;
            int countr = 4;
            int rghtbrd[4][4] = {};
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 1; val2<=countr; val2++){
                    rghtbrd[val1][val2] = board[val1][val2];
                }
            }
            val1 = 0;
            val2 = 1;
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 1; val2<=countr; val2++){
                    // makes sure that values are equal so that it can add right
                    if(rghtbrd[row1][val2] == rghtbrd[row1][val1] && rghtbrd[row1][val2] > 0){
                        match2++;
                    }
                    // makes sure that values are equal so that it can add right
                    if(rghtbrd[row2][val2] == rghtbrd[row2][val1] && rghtbrd[row2][val2] > 0){
                        match2++;
                    }
                    // makes sure that values are equal so that it can add right
                    if(rghtbrd[row3][val2] == rghtbrd[row3][val1] && rghtbrd[row3][val2] > 0){
                        match2++;
                    }
                    // makes sure that values are equal so that it can add right
                    if(rghtbrd[row4][val2] == rghtbrd[row4][val1] && rghtbrd[row4][val2] > 0){
                        match2++;
                    }
                }
            }
        }
        int match3;
        int dwnchk(){
            int val1 = 0;
            int val2 = 0;
            int countr = 4;
            int dwnbrd[4][4] = {};
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 0; val2<=countr; val2++){
                    dwnbrd[val1][val2] = board[val1][val2];
                }
            }
            val1 = 0;
            val2 = 0;
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 0; val2<=countr; val2++){
                    if(dwnbrd[row4][val1] == dwnbrd[row3][val1] && dwnbrd[row4][val1] > 0){
                        match3++;
                    }
                    // makes sure that values are equal so that it can add down
                    if(dwnbrd[row3][val1] == dwnbrd[row2][val1] && dwnbrd[row3][val1] > 0){
                        match3++;
                    }
                    // makes sure that values are equal so that it can add down
                    if(dwnbrd[row2][val1] == dwnbrd[row1][val1] && dwnbrd[row2][val1] > 0){
                        match3++;
                    }
                    // makes sure that values are equal so that it can add down
                    if(dwnbrd[row1][val1] == dwnbrd[row2][val1] && dwnbrd[row1][val1] > 0){
                        match3++;
                    }
                }
            }
        }

    int match4;
        int lftchk(){
            int val1 = 0;
            int val2 = 1;
            int countr = 4;
            int lftbrd[4][4] = {};
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 1; val2<=countr; val2++){
                    lftbrd[val1][val2] = board[val1][val2];
                }
            }
            val1 = 0;
            val2 = 1;
            for(val1 = 0; val1<=countr; val1++){
                for(val2 = 1; val2<=countr; val2++){
                    if(lftbrd[row1][val1] == lftbrd[row1][val2] && lftbrd[row1][val2] > 0){
                        match4++;
                    }
                    // makes sure that values are equal so that it can add down
                    if(lftbrd[row2][val1] == lftbrd[row2][val2] && lftbrd[row2][val1] > 0){
                        match4++;
                    }
                    // makes sure that values are equal so that it can add down
                    if(lftbrd[row3][val1] == lftbrd[row3][val2] && lftbrd[row3][val1] > 0){
                        match4++;
                    }
                    // makes sure that values are equal so that it can add left
                    if(lftbrd[row4][val1] == lftbrd[row4][val2] && lftbrd[row4][val1] > 0){
                        match4++;
                    }
                }
            }
        }

        int matchret(){
            return match;
        }
        int matchret2(){
            return match2;
        }
        int matchret3(){
            return match3;
        }
        int matchret4(){
            return match4;
        }

   };

int main()

{
    chks gameobj;
    int outmatch = gameobj.match;
    int outmatch2 = gameobj.match2;
    int outmatch3 = gameobj.match3;
    int outmatch4 = gameobj.match4;
    srand (time(NULL));// reinitializes board
    game grid; // creates the object in which relates to functions to be called
    grid.boardinit(); //initializes all values to 0
    grid.randpos(); //sets two random positions to 1
    cout << "\t\t" << "Welcome to 2048!!!" << endl << "\t\t" << "The game plays itself, so sit back and watch!" << endl << endl;
    int i = 1;
    //the purpose of this code is to have the game play by itself
    while(i>0){
        int countr = 4;
        int plchold;
        int val = 0;
        int matches[4] = {outmatch , outmatch2, outmatch3, outmatch4};
        for(countr = 4; countr >0; countr--){
            for(val = 0; val<countr; val++){
                if(matches[val] < matches[val + 1]){
                    plchold = matches[val + 1];
                    matches[val + 1] = matches[val];
                    matches[val] = plchold;
                }
            }
        }
        return matches[0];
        gameobj.matchret();
        gameobj.matchret2();
        gameobj.matchret3();
        gameobj.matchret4();

        if(matches[0] == gameobj.match){
            Sleep(100 * 3);// delays so we can understand the what's going on
            grid.addUp();// adds up
            grid.showG();// shows the current status of the board
            grid.gamechk();// checks if the game is over(if we've attained a value above 2^36)
            grid.spcfill();// randomly puts 2^1 in a random spot
            cout << endl << "\t\t" << "^" << endl << "|" << endl << "|" << endl;// indicates direction that's occouring
        }
        // everything beyond here should be self-explanitory
        if(matches[0] == gameobj.match2){
            Sleep(100 * 3);
            grid.addRowsRt();
            grid.showG();
            grid.gamechk();
            grid.spcfill();
            cout << endl << "\t\t" << "-" << "-" << ">" << endl;
        }
        if(matches[0] == gameobj.match3){
            Sleep(100 * 3);
            grid.addRowsDn();
            grid.showG();
            grid.gamechk();
            grid.spcfill();
            cout << endl << "\t\t" << "|" << endl << "|" << endl << "v" << endl;
        }
        if(matches[0] == gameobj.match4){
            Sleep(100 * 3);
            grid.addRowsLf();
            grid.showG();
            grid.gamechk();
            grid.spcfill();
            grid.spcfill();
            cout << endl << "\t\t" << "<" << "-" << "-" << endl;
        }
    }
}
    return 0;

